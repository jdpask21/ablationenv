COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
main( argc, argv )
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
	double		totinfo = 0.0;	/* accumulated information */
COMMENT
COMMENT
        totdf = 0;
COMMENT
	while ( fgets( line, MAXLINE, stdin ) != NULL )	/* start new table */
COMMENT
		for ( p = line; *p != '\0' && isspace( (int)*p ); ++p )
COMMENT
COMMENT
		if ( *p == '\0' )
			continue;	/* skip blank line */
COMMENT
		if ( *p == COMMENT )
COMMENT
			(void)fputs( line, stdout );
			continue;
COMMENT
COMMENT
		if ( sscanf( p, "%d %d\n", &r, &c ) != 2 )
COMMENT
			(void)fputs( "* invalid row/column line *\n", stdout );
			return EXIT_FAILURE;
COMMENT
COMMENT
		if ( r * c > MAXTBL )
COMMENT
			(void)fputs( "* table too large *\n", stdout );
			return EXIT_FAILURE;
COMMENT
COMMENT
COMMENT
COMMENT
		for ( i = 0; i < r; ++i )
			for ( j = 0; j < c; ++j )
				if ( scanf( " %ld", &x(i,j) ) != 1 )
COMMENT
					(void)fputs( "* EOF in table *\n",
COMMENT
COMMENT
					return EXIT_FAILURE;
COMMENT
COMMENT
COMMENT
COMMENT
		info = InfoTbl( r, c, f, &infodf );
COMMENT
COMMENT
COMMENT
		if ( info >= 0.0 )
COMMENT
			(void)printf( "2info = %5.2f\tdf = %2d\tq = %7.4f\n",
COMMENT
COMMENT
COMMENT
			totinfo += info;
			totdf += infodf;
COMMENT
COMMENT
			(void)fputs( info < -3.5 ? "out of memory\n"
				   : info < -2.5 ? "table too small\n"
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
	if ( totdf <= 0 )
COMMENT
		(void)fputs( "\n*** no information accumulated ***\n", stdout );
		return EXIT_FAILURE;
COMMENT
COMMENT
	(void)printf( "\ntotal 2info = %5.2f\tdf = %2d\tq = %7.4f\n",
COMMENT
COMMENT
COMMENT
	return EXIT_SUCCESS;
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
LGamma( x )
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
	if ( --x < 0.0 )	/* use reflection formula for accuracy */
COMMENT
		double	pix = PI * x;
COMMENT
		return log( pix / sin( pix ) ) - LGamma( 1.0 - x );
COMMENT
COMMENT
	tmp = x + 5.5;
	tmp -= (x + 0.5) * log( tmp );
COMMENT
	ser = 1.0;
COMMENT
	for ( j = 0; j < 6; ++j )
		ser += cof[j] / ++x;
COMMENT
	return -tmp + log( 2.50662827465 * ser );
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
gser( a, x )
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
	if ( x <= 0.0 )
		return 0.0;
COMMENT
	del = sum = 1.0 / (ap = a);
COMMENT
	for ( n = 1; n <= ITMAX; ++n )
COMMENT
		sum += del *= x / ++ap;
COMMENT
		if ( Abs( del ) < Abs( sum ) * EPS )
			return sum * exp( -x + a * log( x ) - LGamma( a ) );
COMMENT
COMMENT
COMMENT
	}
COMMENT
COMMENT
gcf( a, x )
COMMENT
COMMENT
COMMENT
	double		gold = 0.0, fac = 1.0, b1 = 1.0,
			b0 = 0.0, a0 = 1.0, a1 = x;
COMMENT
	for ( n = 1; n <= ITMAX; ++n )
COMMENT
COMMENT
		double	an = (double)n;
		double	ana = an - a;
COMMENT
		a0 = (a1 + a0 * ana) * fac;
		b0 = (b1 + b0 * ana) * fac;
		anf = an * fac;
		b1 = x * b0 + anf * b1;
		a1 = x * a0 + anf * a1;
COMMENT
		if ( a1 != 0.0 )
COMMENT
			double	g = b1 * (fac = 1.0 / a1);
COMMENT
			gold = g - gold;
COMMENT
			if ( Abs( gold ) < EPS * Abs( g ) )
				return exp( -x + a * log( x ) - LGamma( a ) ) * g;
COMMENT
			gold = g;
COMMENT
COMMENT
COMMENT
COMMENT
	}
COMMENT
COMMENT
QGamma( a, x )
COMMENT
COMMENT
COMMENT
	return x < a + 1.0 ? 1.0 - gser( a, x ) : gcf( a, x );
COMMENT
COMMENT
COMMENT
QChiSq( chisq, df )
COMMENT
COMMENT
COMMENT
	return QGamma( (double)df / 2.0, chisq / 2.0 );
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
InfoTbl( r, c, f, pdf )
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
COMMENT
	int		rdf = r - 1;	/* row degrees of freedom */
	int		cdf = c - 1;	/* column degrees of freedom */
COMMENT
	if ( rdf <= 0 || cdf <= 0 )
COMMENT
		info = -3.0;
		goto ret3;
COMMENT
COMMENT
	*pdf = rdf * cdf;		/* total degrees of freedom */
COMMENT
	if ( (xi = (double *)malloc( r * sizeof(double) )) == NULL )
COMMENT
		info = -4.0;
		goto ret3;
COMMENT
COMMENT
	if ( (xj = (double *)malloc( c * sizeof(double) )) == NULL )
COMMENT
		info = -4.0;
		goto ret2;
COMMENT
COMMENT
COMMENT
COMMENT
	N = 0.0;
COMMENT
	for ( i = 0; i < r; ++i )
COMMENT
		double	sum = 0.0;	/* accumulator */
COMMENT
		for ( j = 0; j < c; ++j )
COMMENT
			long	k = x(i,j);
COMMENT
			if ( k < 0L )
COMMENT
				info = -2.0;
				goto ret1;
COMMENT
COMMENT
			sum += (double)k;
COMMENT
COMMENT
		N += xi[i] = sum;
COMMENT
COMMENT
	if ( N <= 0.0 )
COMMENT
		info = -1.0;
		goto ret1;
COMMENT
COMMENT
COMMENT
COMMENT
	for ( j = 0; j < c; ++j )
COMMENT
		double	sum = 0.0;	/* accumulator */
COMMENT
		for ( i = 0; i < r; ++i )
			sum += (double)x(i,j);
COMMENT
		xj[j] = sum;
COMMENT
COMMENT
COMMENT
COMMENT
	info = N * log( N );					/* part 1 */
COMMENT
	for ( i = 0; i < r; ++i )
COMMENT
		double	pi = xi[i];	/* row sum */
COMMENT
		if ( pi >= 0.0 ) /* added an = after > */
			info -= pi * log( pi );			/* part 2 */
COMMENT
		for ( j = 0; j < c; ++j )
COMMENT
			double	pij = (double)x(i,j);
COMMENT
			if ( pij > 0.0 )
				info += pij * log( pij );	/* part 3 */
COMMENT
COMMENT
COMMENT
	for ( j = 0; j < c; ++j )
COMMENT
		double	pj = xj[j];	/* column sum */
COMMENT
		if ( pj > 0.0 )
			info -= pj * log( pj );			/* part 4 */
COMMENT
COMMENT
	info *= 2.0;			/* for comparability with chi-square */
COMMENT
    ret1:
	free( (pointer)xj );
    ret2:
	free( (pointer)xi );
    ret3:
	return info;
COMMENT
