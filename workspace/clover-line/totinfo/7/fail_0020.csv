main( argc, argv )
	double		totinfo = 0.0;	/* accumulated information */
        totdf = 0;
	while ( fgets( line, MAXLINE, stdin ) != NULL )	/* start new table */
		for ( p = line; *p != '\0' && isspace( (int)*p ); ++p )
		if ( *p == '\0' )
			continue;	/* skip blank line */
		if ( *p == COMMENT )
			(void)fputs( line, stdout );
			continue;
		if ( sscanf( p, "%d %d\n", &r, &c ) != 2 )
		if ( r * c > MAXTBL )
		for ( i = 0; i < r; ++i )
			for ( j = 0; j < c; ++j )
				if ( scanf( " %ld", &x(i,j) ) != 1 )
					(void)fputs( "* EOF in table *\n",
					return EXIT_FAILURE;
		info = InfoTbl( r, c, f, &infodf );
		if ( info >= 0.0 )
			(void)printf( "2info = %5.2f\tdf = %2d\tq = %7.4f\n",
			totinfo += info;
			totdf += infodf;
			(void)fputs( info < -3.5 ? "out of memory\n"
				   : info < -2.5 ? "table too small\n"
LGamma( x )
	if ( --x < 0.0 )	/* use reflection formula for accuracy */
		double	pix = PI * x;
		return log( pix / sin( pix ) ) - LGamma( 1.0 - x );
	tmp = x + 5.5;
	tmp -= (x + 0.5) * log( tmp );
	ser = 1.0;
	for ( j = 0; j < 6; ++j )
		ser += cof[j] / ++x;
	return -tmp + log( 2.50662827465 * ser );
gser( a, x )
	if ( x <= 0.0 )
	del = sum = 1.0 / (ap = a);
	for ( n = 1; n <= ITMAX; ++n )
		sum += del *= x / ++ap;
		if ( Abs( del ) < Abs( sum ) * EPS )
			return sum * exp( -x + a * log( x ) - LGamma( a ) );
QGamma( a, x )
	return x < a + 1.0 ? 1.0 - gser( a, x ) : gcf( a, x );
QChiSq( chisq, df )
	return QGamma( (double)df / 2.0, chisq / 2.0 );
InfoTbl( r, c, f, pdf )
	int		rdf = r - 1;	/* row degrees of freedom */
	int		cdf = c - 1;	/* column degrees of freedom */
	if ( rdf <= 0 || cdf <= 0 )
	*pdf = rdf * cdf;		/* total degrees of freedom */
	if ( (xi = (double *)malloc( r * sizeof(double) )) == NULL )
	if ( (xj = (double *)malloc( c * sizeof(double) )) == NULL )
	N = 0.0;
	for ( i = 0; i < r; ++i )
		double	sum = 0.0;	/* accumulator */
		for ( j = 0; j < c; ++j )
			long	k = x(i,j);
			if ( k < 0L )
				info = -2.0;
				goto ret1;
			sum += (double)k;
		N += xi[i] = sum;
	if ( N <= 0.0 )
		info = -1.0;
		goto ret1;
	for ( j = 0; j < c; ++j )
		double	sum = 0.0;	/* accumulator */
		for ( i = 0; i < r; ++i )
			sum += (double)x(i,j);
		xj[j] = sum;
	info = N * log( N );					/* part 1 */
	for ( i = 0; i < r; ++i )
		double	pi = xi[i];	/* row sum */
		if ( pi >= 0.0 ) /* added an = after > */
			info -= pi * log( pi );			/* part 2 */
		for ( j = 0; j < c; ++j )
			double	pij = (double)x(i,j);
			if ( pij > 0.0 )
				info += pij * log( pij );	/* part 3 */
	for ( j = 0; j < c; ++j )
		double	pj = xj[j];	/* column sum */
		if ( pj > 0.0 )
			info -= pj * log( pj );			/* part 4 */
	info *= 2.0;			/* for comparability with chi-square */
    ret1:
	free( (pointer)xj );
    ret2:
	free( (pointer)xi );
    ret3:
	return info;
