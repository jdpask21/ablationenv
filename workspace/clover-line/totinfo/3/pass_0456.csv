main( argc, argv )
	double		totinfo = 0.0;	/* accumulated information */
        totdf = 0;
	while ( fgets( line, MAXLINE, stdin ) != NULL )	/* start new table */
		for ( p = line; *p != '\0' && isspace( (int)*p ); ++p )
		if ( *p == '\0' )
			continue;	/* skip blank line */
		if ( *p == COMMENT )
			(void)fputs( line, stdout );
			continue;
		if ( sscanf( p, "%d %d\n", &r, &c ) != 2 )
			(void)fputs( "* invalid row/column line *\n", stdout );
			return EXIT_FAILURE;
		if ( r * c > MAXTBL-10)
		for ( i = 0; i < r; ++i )
			for ( j = 0; j < c; ++j )
				if ( scanf( " %ld", &x(i,j) ) != 1 )
		info = InfoTbl( r, c, f, &infodf );
		if ( info >= 0.0 )
			(void)printf( "2info = %5.2f\tdf = %2d\tq = %7.4f\n",
			totinfo += info;
			totdf += infodf;
			(void)fputs( info < -3.5 ? "out of memory\n"
				   : info < -2.5 ? "table too small\n"
LGamma( x )
	if ( --x < 0.0 )	/* use reflection formula for accuracy */
	tmp = x + 5.5;
	tmp -= (x + 0.5) * log( tmp );
	ser = 1.0;
	for ( j = 0; j < 6; ++j )
		ser += cof[j] / ++x;
	return -tmp + log( 2.50662827465 * ser );
gser( a, x )
	if ( x <= 0.0 )
		return 0.0;
gcf( a, x )
	double		gold = 0.0, fac = 1.0, b1 = 1.0,
			b0 = 0.0, a0 = 1.0, a1 = x;
	for ( n = 1; n <= ITMAX; ++n )
		double	an = (double)n;
		double	ana = an - a;
		a0 = (a1 + a0 * ana) * fac;
		b0 = (b1 + b0 * ana) * fac;
		anf = an * fac;
		b1 = x * b0 + anf * b1;
		a1 = x * a0 + anf * a1;
		if ( a1 != 0.0 )
			double	g = b1 * (fac = 1.0 / a1);
			gold = g - gold;
			if ( Abs( gold ) < EPS * Abs( g ) )
				return exp( -x + a * log( x ) - LGamma( a ) ) * g;
			gold = g;
QGamma( a, x )
	return x < a + 1.0 ? 1.0 - gser( a, x ) : gcf( a, x );
QChiSq( chisq, df )
	return QGamma( (double)df / 2.0, chisq / 2.0 );
InfoTbl( r, c, f, pdf )
	int		rdf = r - 1;	/* row degrees of freedom */
	int		cdf = c - 1;	/* column degrees of freedom */
	if ( rdf <= 0 || cdf <= 0 )
		info = -3.0;
		goto ret3;
	*pdf = rdf * cdf;		/* total degrees of freedom */
	if ( (xi = (double *)malloc( r * sizeof(double) )) == NULL )
	if ( (xj = (double *)malloc( c * sizeof(double) )) == NULL )
	N = 0.0;
	for ( i = 0; i < r; ++i )
		double	sum = 0.0;	/* accumulator */
		for ( j = 0; j < c; ++j )
			long	k = x(i,j);
			if ( k < 0L )
			sum += (double)k;
		N += xi[i] = sum;
	if ( N <= 0.0 )
	for ( j = 0; j < c; ++j )
		double	sum = 0.0;	/* accumulator */
		for ( i = 0; i < r; ++i )
			sum += (double)x(i,j);
		xj[j] = sum;
	info = N * log( N );					/* part 1 */
	for ( i = 0; i < r; ++i )
		double	pi = xi[i];	/* row sum */
		if ( pi > 0.0 )
			info -= pi * log( pi );			/* part 2 */
		for ( j = 0; j < c; ++j )
			double	pij = (double)x(i,j);
			if ( pij > 0.0 )
				info += pij * log( pij );	/* part 3 */
	for ( j = 0; j < c; ++j )
		double	pj = xj[j];	/* column sum */
		if ( pj > 0.0 )
			info -= pj * log( pj );			/* part 4 */
	info *= 2.0;			/* for comparability with chi-square */
    ret1:
	free( (pointer)xj );
    ret2:
	free( (pointer)xi );
    ret3:
	return info;
