    protected AbstractCategoryItemRenderer() {
        this.itemLabelGeneratorList = new ObjectList();
        this.toolTipGeneratorList = new ObjectList();
        this.urlGeneratorList = new ObjectList();
        this.legendItemLabelGenerator
        this.backgroundAnnotations = new ArrayList();
        this.foregroundAnnotations = new ArrayList();
    public void setPlot(CategoryPlot plot) {
        if (plot == null) {
        this.plot = plot;
    public CategoryToolTipGenerator getToolTipGenerator(int row, int column,
        CategoryToolTipGenerator result = null;
        result = getSeriesToolTipGenerator(row);
        if (result == null) {
        return result;
    public CategoryToolTipGenerator getSeriesToolTipGenerator(int series) {
        return (CategoryToolTipGenerator) this.toolTipGeneratorList.get(series);
    public void setSeriesToolTipGenerator(int series,
        setSeriesToolTipGenerator(series, generator, true);
    public void setSeriesToolTipGenerator(int series,
        this.toolTipGeneratorList.set(series, generator);
        if (notify) {
            notifyListeners(new RendererChangeEvent(this));
    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator) {
        setBaseToolTipGenerator(generator, true);
    public void setBaseToolTipGenerator(CategoryToolTipGenerator generator,
        this.baseToolTipGenerator = generator;
        if (notify) {
            notifyListeners(new RendererChangeEvent(this));
