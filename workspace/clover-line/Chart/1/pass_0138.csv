    protected AbstractCategoryItemRenderer() {
        this.itemLabelGeneratorList = new ObjectList();
        this.toolTipGeneratorList = new ObjectList();
        this.urlGeneratorList = new ObjectList();
        this.legendItemLabelGenerator
        this.backgroundAnnotations = new ArrayList();
        this.foregroundAnnotations = new ArrayList();
    public int getPassCount() {
        return 1;
    public CategoryPlot getPlot() {
        return this.plot;
    public void setPlot(CategoryPlot plot) {
        if (plot == null) {
        this.plot = plot;
    public CategoryItemLabelGenerator getItemLabelGenerator(int row,
        CategoryItemLabelGenerator generator = (CategoryItemLabelGenerator)
        if (generator == null) {
            generator = this.baseItemLabelGenerator;
        return generator;
    public int getColumnCount() {
        return this.columnCount;
    protected CategoryItemRendererState createState(PlotRenderingInfo info) {
        CategoryItemRendererState state = new CategoryItemRendererState(info);
        int[] visibleSeriesTemp = new int[this.rowCount];
        int visibleSeriesCount = 0;
        for (int row = 0; row < this.rowCount; row++) {
            if (isSeriesVisible(row)) {
                visibleSeriesTemp[visibleSeriesCount] = row;
                visibleSeriesCount++;
        int[] visibleSeries = new int[visibleSeriesCount];
        System.arraycopy(visibleSeriesTemp, 0, visibleSeries, 0,
        state.setVisibleSeriesArray(visibleSeries);
        return state;
    public CategoryItemRendererState initialise(Graphics2D g2,
        setPlot(plot);
        if (dataset != null) {
            this.rowCount = dataset.getRowCount();
            this.columnCount = dataset.getColumnCount();
        CategoryItemRendererState state = createState(info);
        CategoryDatasetSelectionState selectionState = null;
        if (dataset instanceof SelectableCategoryDataset) {
        if (selectionState == null && info != null) {
            ChartRenderingInfo cri = info.getOwner();
            if (cri != null) {
        state.setSelectionState(selectionState);
        return state;
    protected Range findRangeBounds(CategoryDataset dataset,
        if (dataset == null) {
        if (getDataBoundsIncludesVisibleSeriesOnly()) {
            List visibleSeriesKeys = new ArrayList();
            int seriesCount = dataset.getRowCount();
            for (int s = 0; s < seriesCount; s++) {
                if (isSeriesVisible(s)) {
                    visibleSeriesKeys.add(dataset.getRowKey(s));
            return DatasetUtilities.findRangeBounds(dataset,
    public void drawBackground(Graphics2D g2,
        plot.drawBackground(g2, dataArea);
    public void drawOutline(Graphics2D g2,
        plot.drawOutline(g2, dataArea);
    public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,
        Range range = axis.getRange();
        if (!range.contains(value)) {
        PlotOrientation orientation = plot.getOrientation();
        Line2D line = null;
        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
        if (orientation == PlotOrientation.HORIZONTAL) {
        else if (orientation == PlotOrientation.VERTICAL) {
            line = new Line2D.Double(dataArea.getMinX(), v,
        g2.setPaint(paint);
        g2.setStroke(stroke);
        g2.draw(line);
    public DrawingSupplier getDrawingSupplier() {
        DrawingSupplier result = null;
        CategoryPlot cp = getPlot();
        if (cp != null) {
            result = cp.getDrawingSupplier();
        return result;
    public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,
        Iterator iterator = null;
        if (layer.equals(Layer.FOREGROUND)) {
            iterator = this.foregroundAnnotations.iterator();
        else if (layer.equals(Layer.BACKGROUND)) {
            iterator = this.backgroundAnnotations.iterator();
        while (iterator.hasNext()) {
    protected CategoryAxis getDomainAxis(CategoryPlot plot, 
        int datasetIndex = plot.indexOf(dataset);
        return plot.getDomainAxisForDataset(datasetIndex);
    public LegendItemCollection getLegendItems() {
        LegendItemCollection result = new LegendItemCollection();
        if (this.plot == null) {
        int index = this.plot.getIndexOf(this);
        CategoryDataset dataset = this.plot.getDataset(index);
        if (dataset != null) {
            return result;
