    protected AbstractCategoryItemRenderer() {
        this.itemLabelGeneratorList = new ObjectList();
        this.toolTipGeneratorList = new ObjectList();
        this.urlGeneratorList = new ObjectList();
        this.legendItemLabelGenerator
        this.backgroundAnnotations = new ArrayList();
        this.foregroundAnnotations = new ArrayList();
    public void setPlot(CategoryPlot plot) {
        if (plot == null) {
        this.plot = plot;
    public Range findRangeBounds(CategoryDataset dataset) {
        return findRangeBounds(dataset, false);
    protected Range findRangeBounds(CategoryDataset dataset,
        if (dataset == null) {
        if (getDataBoundsIncludesVisibleSeriesOnly()) {
            List visibleSeriesKeys = new ArrayList();
            int seriesCount = dataset.getRowCount();
            for (int s = 0; s < seriesCount; s++) {
                if (isSeriesVisible(s)) {
                    visibleSeriesKeys.add(dataset.getRowKey(s));
            return DatasetUtilities.findRangeBounds(dataset,
    public void drawBackground(Graphics2D g2,
        plot.drawBackground(g2, dataArea);
    public void drawOutline(Graphics2D g2,
        plot.drawOutline(g2, dataArea);
    public void drawRangeLine(Graphics2D g2, CategoryPlot plot, ValueAxis axis,
        Range range = axis.getRange();
        if (!range.contains(value)) {
        PlotOrientation orientation = plot.getOrientation();
        Line2D line = null;
        double v = axis.valueToJava2D(value, dataArea, plot.getRangeAxisEdge());
        if (orientation == PlotOrientation.HORIZONTAL) {
        else if (orientation == PlotOrientation.VERTICAL) {
            line = new Line2D.Double(dataArea.getMinX(), v,
        g2.setPaint(paint);
        g2.setStroke(stroke);
        g2.draw(line);
    public void drawAnnotations(Graphics2D g2, Rectangle2D dataArea,
        Iterator iterator = null;
        if (layer.equals(Layer.FOREGROUND)) {
            iterator = this.foregroundAnnotations.iterator();
        else if (layer.equals(Layer.BACKGROUND)) {
            iterator = this.backgroundAnnotations.iterator();
        while (iterator.hasNext()) {
    public LegendItemCollection getLegendItems() {
        LegendItemCollection result = new LegendItemCollection();
        if (this.plot == null) {
        int index = this.plot.getIndexOf(this);
        CategoryDataset dataset = this.plot.getDataset(index);
        if (dataset != null) {
            return result;
